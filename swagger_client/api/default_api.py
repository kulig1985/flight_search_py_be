# coding: utf-8

"""
    Search API

    For existing users using the api.skypicker.com endpoint:\\ You need to have an affiliate (partner) ID. This ID is used across Kiwi.com services to distinguish between partners. In this API, for all endpoints, you need to specify it in query parameter `partner`.  For new users of the Kiwi.com APIs:\\ Please register to our Tequila portal at [tequila.kiwi.com](https://tequila.kiwi.com/) to get your unique API key and use the new API there.  This API provides several options how to search for itineraries. At the moment there are different type of itineraries and different endpoints how to search for them. For oneway and roundtrip itineraries /flights endpoint need to be used. If you want to search for itineraries with multiple stops and you know exactly in which order you want them, then use our multicity searching which is available on /flights/multicity endpoint. Finally if you want to search for itineraries where you know the start and end of you journey and you know all the stops, but you don't mind in which order then you can use our Nomad searching which is available on /traveling_salesman endpoint.  Response from all endpoints will contain a list of itineraries, where each itinerary contain a link leading directly to Kiwi.com booking page where the user can book the specified flight. Each itinerary will also contain booking token which is needed in [Booking API](https://docs.kiwi.com/#header-booking-api).  Please note that all parameters marked as \"Deprecated\" are still accepted, although later they will be decommissioned. Some of them will be decommissioned completely and some of them can be replaced with other more powerful parameters. More information can be found in the description of the actual parameter.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def flights_get(self, partner, **kwargs):  # noqa: E501
        """/flights  # noqa: E501

        Search for oneway and roundtrip itineraries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_get(partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param FlyFrom fly_from:
        :param FlyTo fly_to:
        :param FlyDays fly_days:
        :param FlyDaysType fly_days_type:
        :param RetFlyDays ret_fly_days:
        :param RetFlyDaysType ret_fly_days_type:
        :param DepartAfter depart_after:
        :param DepartBefore depart_before:
        :param ArriveAfter arrive_after:
        :param ArriveBefore arrive_before:
        :param RtDepartAfter rt_depart_after:
        :param RtDepartBefore rt_depart_before:
        :param RtArriveAfter rt_arrive_after:
        :param RtArriveBefore rt_arrive_before:
        :param NightsInDstFrom nights_in_dst_from:
        :param NightsInDstTo nights_in_dst_to:
        :param DtimeFrom dtime_from:
        :param DtimeTo dtime_to:
        :param AtimeFrom atime_from:
        :param AtimeTo atime_to:
        :param RetDtimeFrom ret_dtime_from:
        :param RetDtimeTo ret_dtime_to:
        :param RetAtimeFrom ret_atime_from:
        :param RetAtimeTo ret_atime_to:
        :param MaxFlyDuration max_fly_duration:
        :param VehicleType vehicle_type:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param StopoverFrom stopover_from:
        :param StopoverTo stopover_to:
        :param MaxStopovers max_stopovers:
        :param MaxSectorStopovers max_sector_stopovers:
        :param ConnOnDiffAirport conn_on_diff_airport:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param FlightType flight_type:
        :param RetFromDiffAirport ret_from_diff_airport:
        :param RetToDiffAirport ret_to_diff_airport:
        :param OneForCity one_for_city:
        :param OnePerDate one_per_date:
        :param Curr curr:
        :param Locale locale:
        :param Sort sort:
        :param Asc asc:
        :param Limit limit:
        :param DateFrom date_from:
        :param DateTo date_to:
        :param ReturnFrom return_from:
        :param ReturnTo return_to:
        :param OnlyWorkingDays only_working_days:
        :param OnlyWeekends only_weekends:
        :param DirectFlights direct_flights:
        :param V v:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flights_get_with_http_info(partner, **kwargs)  # noqa: E501
        else:
            (data) = self.flights_get_with_http_info(partner, **kwargs)  # noqa: E501
            return data

    def flights_get_with_http_info(self, partner, **kwargs):  # noqa: E501
        """/flights  # noqa: E501

        Search for oneway and roundtrip itineraries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_get_with_http_info(partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param FlyFrom fly_from:
        :param FlyTo fly_to:
        :param FlyDays fly_days:
        :param FlyDaysType fly_days_type:
        :param RetFlyDays ret_fly_days:
        :param RetFlyDaysType ret_fly_days_type:
        :param DepartAfter depart_after:
        :param DepartBefore depart_before:
        :param ArriveAfter arrive_after:
        :param ArriveBefore arrive_before:
        :param RtDepartAfter rt_depart_after:
        :param RtDepartBefore rt_depart_before:
        :param RtArriveAfter rt_arrive_after:
        :param RtArriveBefore rt_arrive_before:
        :param NightsInDstFrom nights_in_dst_from:
        :param NightsInDstTo nights_in_dst_to:
        :param DtimeFrom dtime_from:
        :param DtimeTo dtime_to:
        :param AtimeFrom atime_from:
        :param AtimeTo atime_to:
        :param RetDtimeFrom ret_dtime_from:
        :param RetDtimeTo ret_dtime_to:
        :param RetAtimeFrom ret_atime_from:
        :param RetAtimeTo ret_atime_to:
        :param MaxFlyDuration max_fly_duration:
        :param VehicleType vehicle_type:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param StopoverFrom stopover_from:
        :param StopoverTo stopover_to:
        :param MaxStopovers max_stopovers:
        :param MaxSectorStopovers max_sector_stopovers:
        :param ConnOnDiffAirport conn_on_diff_airport:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param FlightType flight_type:
        :param RetFromDiffAirport ret_from_diff_airport:
        :param RetToDiffAirport ret_to_diff_airport:
        :param OneForCity one_for_city:
        :param OnePerDate one_per_date:
        :param Curr curr:
        :param Locale locale:
        :param Sort sort:
        :param Asc asc:
        :param Limit limit:
        :param DateFrom date_from:
        :param DateTo date_to:
        :param ReturnFrom return_from:
        :param ReturnTo return_to:
        :param OnlyWorkingDays only_working_days:
        :param OnlyWeekends only_weekends:
        :param DirectFlights direct_flights:
        :param V v:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partner', 'partner_market', 'fly_from', 'fly_to', 'fly_days', 'fly_days_type', 'ret_fly_days', 'ret_fly_days_type', 'depart_after', 'depart_before', 'arrive_after', 'arrive_before', 'rt_depart_after', 'rt_depart_before', 'rt_arrive_after', 'rt_arrive_before', 'nights_in_dst_from', 'nights_in_dst_to', 'dtime_from', 'dtime_to', 'atime_from', 'atime_to', 'ret_dtime_from', 'ret_dtime_to', 'ret_atime_from', 'ret_atime_to', 'max_fly_duration', 'vehicle_type', 'select_airlines', 'select_airlines_exclude', 'select_stop_airport', 'select_stop_airport_exclude', 'stopover_from', 'stopover_to', 'max_stopovers', 'max_sector_stopovers', 'conn_on_diff_airport', 'selected_cabins', 'mix_with_cabins', 'adults', 'children', 'infants', 'adult_hold_bag', 'adult_hand_bag', 'child_hold_bag', 'child_hand_bag', 'price_from', 'price_to', 'flight_type', 'ret_from_diff_airport', 'ret_to_diff_airport', 'one_for_city', 'one_per_date', 'curr', 'locale', 'sort', 'asc', 'limit', 'date_from', 'date_to', 'return_from', 'return_to', 'only_working_days', 'only_weekends', 'direct_flights', 'v']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flights_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'partner' is set
        if ('partner' not in params or
                params['partner'] is None):
            raise ValueError("Missing the required parameter `partner` when calling `flights_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partner' in params:
            query_params.append(('partner', params['partner']))  # noqa: E501
        if 'partner_market' in params:
            query_params.append(('partner_market', params['partner_market']))  # noqa: E501
        if 'fly_from' in params:
            query_params.append(('fly_from', params['fly_from']))  # noqa: E501
        if 'fly_to' in params:
            query_params.append(('fly_to', params['fly_to']))  # noqa: E501
        if 'fly_days' in params:
            query_params.append(('fly_days', params['fly_days']))  # noqa: E501
        if 'fly_days_type' in params:
            query_params.append(('fly_days_type', params['fly_days_type']))  # noqa: E501
        if 'ret_fly_days' in params:
            query_params.append(('ret_fly_days', params['ret_fly_days']))  # noqa: E501
        if 'ret_fly_days_type' in params:
            query_params.append(('ret_fly_days_type', params['ret_fly_days_type']))  # noqa: E501
        if 'depart_after' in params:
            query_params.append(('depart_after', params['depart_after']))  # noqa: E501
        if 'depart_before' in params:
            query_params.append(('depart_before', params['depart_before']))  # noqa: E501
        if 'arrive_after' in params:
            query_params.append(('arrive_after', params['arrive_after']))  # noqa: E501
        if 'arrive_before' in params:
            query_params.append(('arrive_before', params['arrive_before']))  # noqa: E501
        if 'rt_depart_after' in params:
            query_params.append(('rt_depart_after', params['rt_depart_after']))  # noqa: E501
        if 'rt_depart_before' in params:
            query_params.append(('rt_depart_before', params['rt_depart_before']))  # noqa: E501
        if 'rt_arrive_after' in params:
            query_params.append(('rt_arrive_after', params['rt_arrive_after']))  # noqa: E501
        if 'rt_arrive_before' in params:
            query_params.append(('rt_arrive_before', params['rt_arrive_before']))  # noqa: E501
        if 'nights_in_dst_from' in params:
            query_params.append(('nights_in_dst_from', params['nights_in_dst_from']))  # noqa: E501
        if 'nights_in_dst_to' in params:
            query_params.append(('nights_in_dst_to', params['nights_in_dst_to']))  # noqa: E501
        if 'dtime_from' in params:
            query_params.append(('dtime_from', params['dtime_from']))  # noqa: E501
        if 'dtime_to' in params:
            query_params.append(('dtime_to', params['dtime_to']))  # noqa: E501
        if 'atime_from' in params:
            query_params.append(('atime_from', params['atime_from']))  # noqa: E501
        if 'atime_to' in params:
            query_params.append(('atime_to', params['atime_to']))  # noqa: E501
        if 'ret_dtime_from' in params:
            query_params.append(('ret_dtime_from', params['ret_dtime_from']))  # noqa: E501
        if 'ret_dtime_to' in params:
            query_params.append(('ret_dtime_to', params['ret_dtime_to']))  # noqa: E501
        if 'ret_atime_from' in params:
            query_params.append(('ret_atime_from', params['ret_atime_from']))  # noqa: E501
        if 'ret_atime_to' in params:
            query_params.append(('ret_atime_to', params['ret_atime_to']))  # noqa: E501
        if 'max_fly_duration' in params:
            query_params.append(('max_fly_duration', params['max_fly_duration']))  # noqa: E501
        if 'vehicle_type' in params:
            query_params.append(('vehicle_type', params['vehicle_type']))  # noqa: E501
        if 'select_airlines' in params:
            query_params.append(('select_airlines', params['select_airlines']))  # noqa: E501
        if 'select_airlines_exclude' in params:
            query_params.append(('select_airlines_exclude', params['select_airlines_exclude']))  # noqa: E501
        if 'select_stop_airport' in params:
            query_params.append(('select_stop_airport', params['select_stop_airport']))  # noqa: E501
        if 'select_stop_airport_exclude' in params:
            query_params.append(('select_stop_airport_exclude', params['select_stop_airport_exclude']))  # noqa: E501
        if 'stopover_from' in params:
            query_params.append(('stopover_from', params['stopover_from']))  # noqa: E501
        if 'stopover_to' in params:
            query_params.append(('stopover_to', params['stopover_to']))  # noqa: E501
        if 'max_stopovers' in params:
            query_params.append(('max_stopovers', params['max_stopovers']))  # noqa: E501
        if 'max_sector_stopovers' in params:
            query_params.append(('max_sector_stopovers', params['max_sector_stopovers']))  # noqa: E501
        if 'conn_on_diff_airport' in params:
            query_params.append(('conn_on_diff_airport', params['conn_on_diff_airport']))  # noqa: E501
        if 'selected_cabins' in params:
            query_params.append(('selected_cabins', params['selected_cabins']))  # noqa: E501
        if 'mix_with_cabins' in params:
            query_params.append(('mix_with_cabins', params['mix_with_cabins']))  # noqa: E501
        if 'adults' in params:
            query_params.append(('adults', params['adults']))  # noqa: E501
        if 'children' in params:
            query_params.append(('children', params['children']))  # noqa: E501
        if 'infants' in params:
            query_params.append(('infants', params['infants']))  # noqa: E501
        if 'adult_hold_bag' in params:
            query_params.append(('adult_hold_bag', params['adult_hold_bag']))  # noqa: E501
        if 'adult_hand_bag' in params:
            query_params.append(('adult_hand_bag', params['adult_hand_bag']))  # noqa: E501
        if 'child_hold_bag' in params:
            query_params.append(('child_hold_bag', params['child_hold_bag']))  # noqa: E501
        if 'child_hand_bag' in params:
            query_params.append(('child_hand_bag', params['child_hand_bag']))  # noqa: E501
        if 'price_from' in params:
            query_params.append(('price_from', params['price_from']))  # noqa: E501
        if 'price_to' in params:
            query_params.append(('price_to', params['price_to']))  # noqa: E501
        if 'flight_type' in params:
            query_params.append(('flight_type', params['flight_type']))  # noqa: E501
        if 'ret_from_diff_airport' in params:
            query_params.append(('ret_from_diff_airport', params['ret_from_diff_airport']))  # noqa: E501
        if 'ret_to_diff_airport' in params:
            query_params.append(('ret_to_diff_airport', params['ret_to_diff_airport']))  # noqa: E501
        if 'one_for_city' in params:
            query_params.append(('one_for_city', params['one_for_city']))  # noqa: E501
        if 'one_per_date' in params:
            query_params.append(('one_per_date', params['one_per_date']))  # noqa: E501
        if 'curr' in params:
            query_params.append(('curr', params['curr']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('date_from', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('date_to', params['date_to']))  # noqa: E501
        if 'return_from' in params:
            query_params.append(('return_from', params['return_from']))  # noqa: E501
        if 'return_to' in params:
            query_params.append(('return_to', params['return_to']))  # noqa: E501
        if 'only_working_days' in params:
            query_params.append(('only_working_days', params['only_working_days']))  # noqa: E501
        if 'only_weekends' in params:
            query_params.append(('only_weekends', params['only_weekends']))  # noqa: E501
        if 'direct_flights' in params:
            query_params.append(('direct_flights', params['direct_flights']))  # noqa: E501
        if 'v' in params:
            query_params.append(('v', params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/flights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flights_multi_post(self, body, partner, **kwargs):  # noqa: E501
        """/flights_multi  # noqa: E501

        First version of the multicity search (a.k.a multi-stop or multi-leg). **It is deprecated and /flights/multicity should be used instead.**  Multicity flights are great when traveling through a number of destinations. It allows the customer to specify the origin and destination locations for each sector and finds the best routes and deals. Specifying specific departure dates or a date range narrows or widens the search results, respectively.  Please note:   - /flights_multi accepts in the body in the `requests` property multiple /flights requests.   - This endpoint is not meant to be used for searching for return trips. Use /flights endpoint instead.   - The number of passengers needs to be requested in each partial request (in body in `requests` property).   - The sectors are not required to be continuous but have to be in sequence one after another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_multi_post(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: List of requests per each sector. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param Curr curr:
        :param Locale locale:
        :return: list[Itinerary2]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flights_multi_post_with_http_info(body, partner, **kwargs)  # noqa: E501
        else:
            (data) = self.flights_multi_post_with_http_info(body, partner, **kwargs)  # noqa: E501
            return data

    def flights_multi_post_with_http_info(self, body, partner, **kwargs):  # noqa: E501
        """/flights_multi  # noqa: E501

        First version of the multicity search (a.k.a multi-stop or multi-leg). **It is deprecated and /flights/multicity should be used instead.**  Multicity flights are great when traveling through a number of destinations. It allows the customer to specify the origin and destination locations for each sector and finds the best routes and deals. Specifying specific departure dates or a date range narrows or widens the search results, respectively.  Please note:   - /flights_multi accepts in the body in the `requests` property multiple /flights requests.   - This endpoint is not meant to be used for searching for return trips. Use /flights endpoint instead.   - The number of passengers needs to be requested in each partial request (in body in `requests` property).   - The sectors are not required to be continuous but have to be in sequence one after another.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_multi_post_with_http_info(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: List of requests per each sector. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param Curr curr:
        :param Locale locale:
        :return: list[Itinerary2]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner', 'partner_market', 'curr', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flights_multi_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flights_multi_post`")  # noqa: E501
        # verify the required parameter 'partner' is set
        if ('partner' not in params or
                params['partner'] is None):
            raise ValueError("Missing the required parameter `partner` when calling `flights_multi_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partner' in params:
            query_params.append(('partner', params['partner']))  # noqa: E501
        if 'partner_market' in params:
            query_params.append(('partner_market', params['partner_market']))  # noqa: E501
        if 'curr' in params:
            query_params.append(('curr', params['curr']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/flights_multi', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Itinerary2]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flights_multicity_post(self, body, partner, **kwargs):  # noqa: E501
        """/flights/multicity  # noqa: E501

        Second version of the multicity search (a.k.a multi-stop or multi-leg).  Multicity flights are great when traveling through a number of destinations. It allows the customer to specify the origin and destination locations for each sector and finds the best routes and deals. Specifying specific departure dates or a date range narrows or widens the search results, respectively.  Please note:   - This endpoint is not meant to be used for searching for return trips. Use /flights endpoint instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_multicity_post(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: List of requests per each sector. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param ConnOnDiffAirport conn_on_diff_airport:
        :param MaxDurationSeconds max_duration:
        :param VehicleType vehicle_type:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param Curr curr:
        :param Locale locale:
        :param Limit limit:
        :param Sort sort:
        :param Asc asc:
        :param Passengers passengers:
        :param V v:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flights_multicity_post_with_http_info(body, partner, **kwargs)  # noqa: E501
        else:
            (data) = self.flights_multicity_post_with_http_info(body, partner, **kwargs)  # noqa: E501
            return data

    def flights_multicity_post_with_http_info(self, body, partner, **kwargs):  # noqa: E501
        """/flights/multicity  # noqa: E501

        Second version of the multicity search (a.k.a multi-stop or multi-leg).  Multicity flights are great when traveling through a number of destinations. It allows the customer to specify the origin and destination locations for each sector and finds the best routes and deals. Specifying specific departure dates or a date range narrows or widens the search results, respectively.  Please note:   - This endpoint is not meant to be used for searching for return trips. Use /flights endpoint instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flights_multicity_post_with_http_info(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: List of requests per each sector. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param ConnOnDiffAirport conn_on_diff_airport:
        :param MaxDurationSeconds max_duration:
        :param VehicleType vehicle_type:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param Curr curr:
        :param Locale locale:
        :param Limit limit:
        :param Sort sort:
        :param Asc asc:
        :param Passengers passengers:
        :param V v:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner', 'partner_market', 'selected_cabins', 'mix_with_cabins', 'adults', 'children', 'infants', 'select_airlines', 'select_airlines_exclude', 'select_stop_airport', 'select_stop_airport_exclude', 'price_from', 'price_to', 'conn_on_diff_airport', 'max_duration', 'vehicle_type', 'adult_hold_bag', 'adult_hand_bag', 'child_hold_bag', 'child_hand_bag', 'curr', 'locale', 'limit', 'sort', 'asc', 'passengers', 'v']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flights_multicity_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `flights_multicity_post`")  # noqa: E501
        # verify the required parameter 'partner' is set
        if ('partner' not in params or
                params['partner'] is None):
            raise ValueError("Missing the required parameter `partner` when calling `flights_multicity_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partner' in params:
            query_params.append(('partner', params['partner']))  # noqa: E501
        if 'partner_market' in params:
            query_params.append(('partner_market', params['partner_market']))  # noqa: E501
        if 'selected_cabins' in params:
            query_params.append(('selected_cabins', params['selected_cabins']))  # noqa: E501
        if 'mix_with_cabins' in params:
            query_params.append(('mix_with_cabins', params['mix_with_cabins']))  # noqa: E501
        if 'adults' in params:
            query_params.append(('adults', params['adults']))  # noqa: E501
        if 'children' in params:
            query_params.append(('children', params['children']))  # noqa: E501
        if 'infants' in params:
            query_params.append(('infants', params['infants']))  # noqa: E501
        if 'select_airlines' in params:
            query_params.append(('select_airlines', params['select_airlines']))  # noqa: E501
        if 'select_airlines_exclude' in params:
            query_params.append(('select_airlines_exclude', params['select_airlines_exclude']))  # noqa: E501
        if 'select_stop_airport' in params:
            query_params.append(('select_stop_airport', params['select_stop_airport']))  # noqa: E501
        if 'select_stop_airport_exclude' in params:
            query_params.append(('select_stop_airport_exclude', params['select_stop_airport_exclude']))  # noqa: E501
        if 'price_from' in params:
            query_params.append(('price_from', params['price_from']))  # noqa: E501
        if 'price_to' in params:
            query_params.append(('price_to', params['price_to']))  # noqa: E501
        if 'conn_on_diff_airport' in params:
            query_params.append(('conn_on_diff_airport', params['conn_on_diff_airport']))  # noqa: E501
        if 'max_duration' in params:
            query_params.append(('max_duration', params['max_duration']))  # noqa: E501
        if 'vehicle_type' in params:
            query_params.append(('vehicle_type', params['vehicle_type']))  # noqa: E501
        if 'adult_hold_bag' in params:
            query_params.append(('adult_hold_bag', params['adult_hold_bag']))  # noqa: E501
        if 'adult_hand_bag' in params:
            query_params.append(('adult_hand_bag', params['adult_hand_bag']))  # noqa: E501
        if 'child_hold_bag' in params:
            query_params.append(('child_hold_bag', params['child_hold_bag']))  # noqa: E501
        if 'child_hand_bag' in params:
            query_params.append(('child_hand_bag', params['child_hand_bag']))  # noqa: E501
        if 'curr' in params:
            query_params.append(('curr', params['curr']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501
        if 'passengers' in params:
            query_params.append(('passengers', params['passengers']))  # noqa: E501
        if 'v' in params:
            query_params.append(('v', params['v']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/flights/multicity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def traveling_salesman_post(self, body, partner, **kwargs):  # noqa: E501
        """/traveling_salesman  # noqa: E501

        Search for traveling salesman (Nomad) itineraries.  It works a bit differently then other endpoints. In the query parameters you specify the request about origin and destination. Then in the body parameters you specify the stops you want to visit (with some restrictions). Then our engine will find the most efficient way in which order you should visit your stops.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traveling_salesman_post(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: List of stops. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param FlyFrom fly_from:
        :param FlyTo fly_to:
        :param NomadDateFrom date_from:
        :param NomadDateTo date_to:
        :param NomadReturnFrom return_from:
        :param NomadReturnTo return_to:
        :param NightsOnTripFrom nights_on_trip_from:
        :param NightsOnTripTo nights_on_trip_to:
        :param VehicleType vehicle_type:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param NomadConnOnDiffAirport conn_on_diff_airport:
        :param MaxSectorStopovers max_stopovers:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param Curr curr:
        :param Locale locale:
        :param Sort sort:
        :param Asc asc:
        :param Limit limit:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.traveling_salesman_post_with_http_info(body, partner, **kwargs)  # noqa: E501
        else:
            (data) = self.traveling_salesman_post_with_http_info(body, partner, **kwargs)  # noqa: E501
            return data

    def traveling_salesman_post_with_http_info(self, body, partner, **kwargs):  # noqa: E501
        """/traveling_salesman  # noqa: E501

        Search for traveling salesman (Nomad) itineraries.  It works a bit differently then other endpoints. In the query parameters you specify the request about origin and destination. Then in the body parameters you specify the stops you want to visit (with some restrictions). Then our engine will find the most efficient way in which order you should visit your stops.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.traveling_salesman_post_with_http_info(body, partner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: List of stops. (required)
        :param Partner partner: (required)
        :param PartnerMarket partner_market:
        :param FlyFrom fly_from:
        :param FlyTo fly_to:
        :param NomadDateFrom date_from:
        :param NomadDateTo date_to:
        :param NomadReturnFrom return_from:
        :param NomadReturnTo return_to:
        :param NightsOnTripFrom nights_on_trip_from:
        :param NightsOnTripTo nights_on_trip_to:
        :param VehicleType vehicle_type:
        :param SelectAirlines select_airlines:
        :param SelectAirlinesExclude select_airlines_exclude:
        :param SelectedCabins selected_cabins:
        :param MixWithCabins mix_with_cabins:
        :param SelectStopAirport select_stop_airport:
        :param SelectStopAirportExclude select_stop_airport_exclude:
        :param NomadConnOnDiffAirport conn_on_diff_airport:
        :param MaxSectorStopovers max_stopovers:
        :param Adults adults:
        :param Children children:
        :param Infants infants:
        :param AdultHoldBag adult_hold_bag:
        :param AdultHandBag adult_hand_bag:
        :param ChildHoldBag child_hold_bag:
        :param ChildHandBag child_hand_bag:
        :param PriceFrom price_from:
        :param PriceTo price_to:
        :param Curr curr:
        :param Locale locale:
        :param Sort sort:
        :param Asc asc:
        :param Limit limit:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner', 'partner_market', 'fly_from', 'fly_to', 'date_from', 'date_to', 'return_from', 'return_to', 'nights_on_trip_from', 'nights_on_trip_to', 'vehicle_type', 'select_airlines', 'select_airlines_exclude', 'selected_cabins', 'mix_with_cabins', 'select_stop_airport', 'select_stop_airport_exclude', 'conn_on_diff_airport', 'max_stopovers', 'adults', 'children', 'infants', 'adult_hold_bag', 'adult_hand_bag', 'child_hold_bag', 'child_hand_bag', 'price_from', 'price_to', 'curr', 'locale', 'sort', 'asc', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method traveling_salesman_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `traveling_salesman_post`")  # noqa: E501
        # verify the required parameter 'partner' is set
        if ('partner' not in params or
                params['partner'] is None):
            raise ValueError("Missing the required parameter `partner` when calling `traveling_salesman_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partner' in params:
            query_params.append(('partner', params['partner']))  # noqa: E501
        if 'partner_market' in params:
            query_params.append(('partner_market', params['partner_market']))  # noqa: E501
        if 'fly_from' in params:
            query_params.append(('fly_from', params['fly_from']))  # noqa: E501
        if 'fly_to' in params:
            query_params.append(('fly_to', params['fly_to']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('date_from', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('date_to', params['date_to']))  # noqa: E501
        if 'return_from' in params:
            query_params.append(('return_from', params['return_from']))  # noqa: E501
        if 'return_to' in params:
            query_params.append(('return_to', params['return_to']))  # noqa: E501
        if 'nights_on_trip_from' in params:
            query_params.append(('nights_on_trip_from', params['nights_on_trip_from']))  # noqa: E501
        if 'nights_on_trip_to' in params:
            query_params.append(('nights_on_trip_to', params['nights_on_trip_to']))  # noqa: E501
        if 'vehicle_type' in params:
            query_params.append(('vehicle_type', params['vehicle_type']))  # noqa: E501
        if 'select_airlines' in params:
            query_params.append(('select_airlines', params['select_airlines']))  # noqa: E501
        if 'select_airlines_exclude' in params:
            query_params.append(('select_airlines_exclude', params['select_airlines_exclude']))  # noqa: E501
        if 'selected_cabins' in params:
            query_params.append(('selected_cabins', params['selected_cabins']))  # noqa: E501
        if 'mix_with_cabins' in params:
            query_params.append(('mix_with_cabins', params['mix_with_cabins']))  # noqa: E501
        if 'select_stop_airport' in params:
            query_params.append(('select_stop_airport', params['select_stop_airport']))  # noqa: E501
        if 'select_stop_airport_exclude' in params:
            query_params.append(('select_stop_airport_exclude', params['select_stop_airport_exclude']))  # noqa: E501
        if 'conn_on_diff_airport' in params:
            query_params.append(('conn_on_diff_airport', params['conn_on_diff_airport']))  # noqa: E501
        if 'max_stopovers' in params:
            query_params.append(('max_stopovers', params['max_stopovers']))  # noqa: E501
        if 'adults' in params:
            query_params.append(('adults', params['adults']))  # noqa: E501
        if 'children' in params:
            query_params.append(('children', params['children']))  # noqa: E501
        if 'infants' in params:
            query_params.append(('infants', params['infants']))  # noqa: E501
        if 'adult_hold_bag' in params:
            query_params.append(('adult_hold_bag', params['adult_hold_bag']))  # noqa: E501
        if 'adult_hand_bag' in params:
            query_params.append(('adult_hand_bag', params['adult_hand_bag']))  # noqa: E501
        if 'child_hold_bag' in params:
            query_params.append(('child_hold_bag', params['child_hold_bag']))  # noqa: E501
        if 'child_hand_bag' in params:
            query_params.append(('child_hand_bag', params['child_hand_bag']))  # noqa: E501
        if 'price_from' in params:
            query_params.append(('price_from', params['price_from']))  # noqa: E501
        if 'price_to' in params:
            query_params.append(('price_to', params['price_to']))  # noqa: E501
        if 'curr' in params:
            query_params.append(('curr', params['curr']))  # noqa: E501
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'asc' in params:
            query_params.append(('asc', params['asc']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/traveling_salesman', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
