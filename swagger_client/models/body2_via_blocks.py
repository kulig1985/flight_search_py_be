# coding: utf-8

"""
    Search API

    For existing users using the api.skypicker.com endpoint:\\ You need to have an affiliate (partner) ID. This ID is used across Kiwi.com services to distinguish between partners. In this API, for all endpoints, you need to specify it in query parameter `partner`.  For new users of the Kiwi.com APIs:\\ Please register to our Tequila portal at [tequila.kiwi.com](https://tequila.kiwi.com/) to get your unique API key and use the new API there.  This API provides several options how to search for itineraries. At the moment there are different type of itineraries and different endpoints how to search for them. For oneway and roundtrip itineraries /flights endpoint need to be used. If you want to search for itineraries with multiple stops and you know exactly in which order you want them, then use our multicity searching which is available on /flights/multicity endpoint. Finally if you want to search for itineraries where you know the start and end of you journey and you know all the stops, but you don't mind in which order then you can use our Nomad searching which is available on /traveling_salesman endpoint.  Response from all endpoints will contain a list of itineraries, where each itinerary contain a link leading directly to Kiwi.com booking page where the user can book the specified flight. Each itinerary will also contain booking token which is needed in [Booking API](https://docs.kiwi.com/#header-booking-api).  Please note that all parameters marked as \"Deprecated\" are still accepted, although later they will be decommissioned. Some of them will be decommissioned completely and some of them can be replaced with other more powerful parameters. More information can be found in the description of the actual parameter.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body2ViaBlocks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fly_from': 'FlyFrom',
        'fly_to': 'FlyTo',
        'dep_date_range': 'DepDateRange',
        'arr_date_range': 'ArrDateRange',
        'nights_range': 'MulticityNightsRange',
        'fly_days': 'FlyDays',
        'fly_days_type': 'FlyDaysType',
        'dtime_from': 'DtimeFrom',
        'dtime_to': 'DtimeTo',
        'atime_from': 'AtimeFrom',
        'atime_to': 'AtimeTo',
        'stopover_from': 'StopoverFrom',
        'stopover_to': 'StopoverTo',
        'max_stopovers': 'MaxStopovers',
        'only_working_days': 'OnlyWorkingDays',
        'only_weekends': 'OnlyWeekends'
    }

    attribute_map = {
        'fly_from': 'fly_from',
        'fly_to': 'fly_to',
        'dep_date_range': 'dep_date_range',
        'arr_date_range': 'arr_date_range',
        'nights_range': 'nights_range',
        'fly_days': 'fly_days',
        'fly_days_type': 'fly_days_type',
        'dtime_from': 'dtime_from',
        'dtime_to': 'dtime_to',
        'atime_from': 'atime_from',
        'atime_to': 'atime_to',
        'stopover_from': 'stopover_from',
        'stopover_to': 'stopover_to',
        'max_stopovers': 'max_stopovers',
        'only_working_days': 'only_working_days',
        'only_weekends': 'only_weekends'
    }

    def __init__(self, fly_from=None, fly_to=None, dep_date_range=None, arr_date_range=None, nights_range=None, fly_days=None, fly_days_type=None, dtime_from=None, dtime_to=None, atime_from=None, atime_to=None, stopover_from=None, stopover_to=None, max_stopovers=None, only_working_days=None, only_weekends=None):  # noqa: E501
        """Body2ViaBlocks - a model defined in Swagger"""  # noqa: E501
        self._fly_from = None
        self._fly_to = None
        self._dep_date_range = None
        self._arr_date_range = None
        self._nights_range = None
        self._fly_days = None
        self._fly_days_type = None
        self._dtime_from = None
        self._dtime_to = None
        self._atime_from = None
        self._atime_to = None
        self._stopover_from = None
        self._stopover_to = None
        self._max_stopovers = None
        self._only_working_days = None
        self._only_weekends = None
        self.discriminator = None
        if fly_from is not None:
            self.fly_from = fly_from
        if fly_to is not None:
            self.fly_to = fly_to
        if dep_date_range is not None:
            self.dep_date_range = dep_date_range
        if arr_date_range is not None:
            self.arr_date_range = arr_date_range
        if nights_range is not None:
            self.nights_range = nights_range
        if fly_days is not None:
            self.fly_days = fly_days
        if fly_days_type is not None:
            self.fly_days_type = fly_days_type
        if dtime_from is not None:
            self.dtime_from = dtime_from
        if dtime_to is not None:
            self.dtime_to = dtime_to
        if atime_from is not None:
            self.atime_from = atime_from
        if atime_to is not None:
            self.atime_to = atime_to
        if stopover_from is not None:
            self.stopover_from = stopover_from
        if stopover_to is not None:
            self.stopover_to = stopover_to
        if max_stopovers is not None:
            self.max_stopovers = max_stopovers
        if only_working_days is not None:
            self.only_working_days = only_working_days
        if only_weekends is not None:
            self.only_weekends = only_weekends

    @property
    def fly_from(self):
        """Gets the fly_from of this Body2ViaBlocks.  # noqa: E501


        :return: The fly_from of this Body2ViaBlocks.  # noqa: E501
        :rtype: FlyFrom
        """
        return self._fly_from

    @fly_from.setter
    def fly_from(self, fly_from):
        """Sets the fly_from of this Body2ViaBlocks.


        :param fly_from: The fly_from of this Body2ViaBlocks.  # noqa: E501
        :type: FlyFrom
        """

        self._fly_from = fly_from

    @property
    def fly_to(self):
        """Gets the fly_to of this Body2ViaBlocks.  # noqa: E501


        :return: The fly_to of this Body2ViaBlocks.  # noqa: E501
        :rtype: FlyTo
        """
        return self._fly_to

    @fly_to.setter
    def fly_to(self, fly_to):
        """Sets the fly_to of this Body2ViaBlocks.


        :param fly_to: The fly_to of this Body2ViaBlocks.  # noqa: E501
        :type: FlyTo
        """

        self._fly_to = fly_to

    @property
    def dep_date_range(self):
        """Gets the dep_date_range of this Body2ViaBlocks.  # noqa: E501


        :return: The dep_date_range of this Body2ViaBlocks.  # noqa: E501
        :rtype: DepDateRange
        """
        return self._dep_date_range

    @dep_date_range.setter
    def dep_date_range(self, dep_date_range):
        """Sets the dep_date_range of this Body2ViaBlocks.


        :param dep_date_range: The dep_date_range of this Body2ViaBlocks.  # noqa: E501
        :type: DepDateRange
        """

        self._dep_date_range = dep_date_range

    @property
    def arr_date_range(self):
        """Gets the arr_date_range of this Body2ViaBlocks.  # noqa: E501


        :return: The arr_date_range of this Body2ViaBlocks.  # noqa: E501
        :rtype: ArrDateRange
        """
        return self._arr_date_range

    @arr_date_range.setter
    def arr_date_range(self, arr_date_range):
        """Sets the arr_date_range of this Body2ViaBlocks.


        :param arr_date_range: The arr_date_range of this Body2ViaBlocks.  # noqa: E501
        :type: ArrDateRange
        """

        self._arr_date_range = arr_date_range

    @property
    def nights_range(self):
        """Gets the nights_range of this Body2ViaBlocks.  # noqa: E501


        :return: The nights_range of this Body2ViaBlocks.  # noqa: E501
        :rtype: MulticityNightsRange
        """
        return self._nights_range

    @nights_range.setter
    def nights_range(self, nights_range):
        """Sets the nights_range of this Body2ViaBlocks.


        :param nights_range: The nights_range of this Body2ViaBlocks.  # noqa: E501
        :type: MulticityNightsRange
        """

        self._nights_range = nights_range

    @property
    def fly_days(self):
        """Gets the fly_days of this Body2ViaBlocks.  # noqa: E501


        :return: The fly_days of this Body2ViaBlocks.  # noqa: E501
        :rtype: FlyDays
        """
        return self._fly_days

    @fly_days.setter
    def fly_days(self, fly_days):
        """Sets the fly_days of this Body2ViaBlocks.


        :param fly_days: The fly_days of this Body2ViaBlocks.  # noqa: E501
        :type: FlyDays
        """

        self._fly_days = fly_days

    @property
    def fly_days_type(self):
        """Gets the fly_days_type of this Body2ViaBlocks.  # noqa: E501


        :return: The fly_days_type of this Body2ViaBlocks.  # noqa: E501
        :rtype: FlyDaysType
        """
        return self._fly_days_type

    @fly_days_type.setter
    def fly_days_type(self, fly_days_type):
        """Sets the fly_days_type of this Body2ViaBlocks.


        :param fly_days_type: The fly_days_type of this Body2ViaBlocks.  # noqa: E501
        :type: FlyDaysType
        """

        self._fly_days_type = fly_days_type

    @property
    def dtime_from(self):
        """Gets the dtime_from of this Body2ViaBlocks.  # noqa: E501


        :return: The dtime_from of this Body2ViaBlocks.  # noqa: E501
        :rtype: DtimeFrom
        """
        return self._dtime_from

    @dtime_from.setter
    def dtime_from(self, dtime_from):
        """Sets the dtime_from of this Body2ViaBlocks.


        :param dtime_from: The dtime_from of this Body2ViaBlocks.  # noqa: E501
        :type: DtimeFrom
        """

        self._dtime_from = dtime_from

    @property
    def dtime_to(self):
        """Gets the dtime_to of this Body2ViaBlocks.  # noqa: E501


        :return: The dtime_to of this Body2ViaBlocks.  # noqa: E501
        :rtype: DtimeTo
        """
        return self._dtime_to

    @dtime_to.setter
    def dtime_to(self, dtime_to):
        """Sets the dtime_to of this Body2ViaBlocks.


        :param dtime_to: The dtime_to of this Body2ViaBlocks.  # noqa: E501
        :type: DtimeTo
        """

        self._dtime_to = dtime_to

    @property
    def atime_from(self):
        """Gets the atime_from of this Body2ViaBlocks.  # noqa: E501


        :return: The atime_from of this Body2ViaBlocks.  # noqa: E501
        :rtype: AtimeFrom
        """
        return self._atime_from

    @atime_from.setter
    def atime_from(self, atime_from):
        """Sets the atime_from of this Body2ViaBlocks.


        :param atime_from: The atime_from of this Body2ViaBlocks.  # noqa: E501
        :type: AtimeFrom
        """

        self._atime_from = atime_from

    @property
    def atime_to(self):
        """Gets the atime_to of this Body2ViaBlocks.  # noqa: E501


        :return: The atime_to of this Body2ViaBlocks.  # noqa: E501
        :rtype: AtimeTo
        """
        return self._atime_to

    @atime_to.setter
    def atime_to(self, atime_to):
        """Sets the atime_to of this Body2ViaBlocks.


        :param atime_to: The atime_to of this Body2ViaBlocks.  # noqa: E501
        :type: AtimeTo
        """

        self._atime_to = atime_to

    @property
    def stopover_from(self):
        """Gets the stopover_from of this Body2ViaBlocks.  # noqa: E501


        :return: The stopover_from of this Body2ViaBlocks.  # noqa: E501
        :rtype: StopoverFrom
        """
        return self._stopover_from

    @stopover_from.setter
    def stopover_from(self, stopover_from):
        """Sets the stopover_from of this Body2ViaBlocks.


        :param stopover_from: The stopover_from of this Body2ViaBlocks.  # noqa: E501
        :type: StopoverFrom
        """

        self._stopover_from = stopover_from

    @property
    def stopover_to(self):
        """Gets the stopover_to of this Body2ViaBlocks.  # noqa: E501


        :return: The stopover_to of this Body2ViaBlocks.  # noqa: E501
        :rtype: StopoverTo
        """
        return self._stopover_to

    @stopover_to.setter
    def stopover_to(self, stopover_to):
        """Sets the stopover_to of this Body2ViaBlocks.


        :param stopover_to: The stopover_to of this Body2ViaBlocks.  # noqa: E501
        :type: StopoverTo
        """

        self._stopover_to = stopover_to

    @property
    def max_stopovers(self):
        """Gets the max_stopovers of this Body2ViaBlocks.  # noqa: E501


        :return: The max_stopovers of this Body2ViaBlocks.  # noqa: E501
        :rtype: MaxStopovers
        """
        return self._max_stopovers

    @max_stopovers.setter
    def max_stopovers(self, max_stopovers):
        """Sets the max_stopovers of this Body2ViaBlocks.


        :param max_stopovers: The max_stopovers of this Body2ViaBlocks.  # noqa: E501
        :type: MaxStopovers
        """

        self._max_stopovers = max_stopovers

    @property
    def only_working_days(self):
        """Gets the only_working_days of this Body2ViaBlocks.  # noqa: E501


        :return: The only_working_days of this Body2ViaBlocks.  # noqa: E501
        :rtype: OnlyWorkingDays
        """
        return self._only_working_days

    @only_working_days.setter
    def only_working_days(self, only_working_days):
        """Sets the only_working_days of this Body2ViaBlocks.


        :param only_working_days: The only_working_days of this Body2ViaBlocks.  # noqa: E501
        :type: OnlyWorkingDays
        """

        self._only_working_days = only_working_days

    @property
    def only_weekends(self):
        """Gets the only_weekends of this Body2ViaBlocks.  # noqa: E501


        :return: The only_weekends of this Body2ViaBlocks.  # noqa: E501
        :rtype: OnlyWeekends
        """
        return self._only_weekends

    @only_weekends.setter
    def only_weekends(self, only_weekends):
        """Sets the only_weekends of this Body2ViaBlocks.


        :param only_weekends: The only_weekends of this Body2ViaBlocks.  # noqa: E501
        :type: OnlyWeekends
        """

        self._only_weekends = only_weekends

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body2ViaBlocks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body2ViaBlocks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
