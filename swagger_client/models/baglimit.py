# coding: utf-8

"""
    Search API

    For existing users using the api.skypicker.com endpoint:\\ You need to have an affiliate (partner) ID. This ID is used across Kiwi.com services to distinguish between partners. In this API, for all endpoints, you need to specify it in query parameter `partner`.  For new users of the Kiwi.com APIs:\\ Please register to our Tequila portal at [tequila.kiwi.com](https://tequila.kiwi.com/) to get your unique API key and use the new API there.  This API provides several options how to search for itineraries. At the moment there are different type of itineraries and different endpoints how to search for them. For oneway and roundtrip itineraries /flights endpoint need to be used. If you want to search for itineraries with multiple stops and you know exactly in which order you want them, then use our multicity searching which is available on /flights/multicity endpoint. Finally if you want to search for itineraries where you know the start and end of you journey and you know all the stops, but you don't mind in which order then you can use our Nomad searching which is available on /traveling_salesman endpoint.  Response from all endpoints will contain a list of itineraries, where each itinerary contain a link leading directly to Kiwi.com booking page where the user can book the specified flight. Each itinerary will also contain booking token which is needed in [Booking API](https://docs.kiwi.com/#header-booking-api).  Please note that all parameters marked as \"Deprecated\" are still accepted, although later they will be decommissioned. Some of them will be decommissioned completely and some of them can be replaced with other more powerful parameters. More information can be found in the description of the actual parameter.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Baglimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hand_width': 'int',
        'hand_height': 'int',
        'hand_length': 'int',
        'hand_weight': 'int',
        'hold_width': 'int',
        'hold_height': 'int',
        'hold_length': 'int',
        'hold_dimensions_sum': 'int',
        'hold_weight': 'int'
    }

    attribute_map = {
        'hand_width': 'hand_width',
        'hand_height': 'hand_height',
        'hand_length': 'hand_length',
        'hand_weight': 'hand_weight',
        'hold_width': 'hold_width',
        'hold_height': 'hold_height',
        'hold_length': 'hold_length',
        'hold_dimensions_sum': 'hold_dimensions_sum',
        'hold_weight': 'hold_weight'
    }

    def __init__(self, hand_width=None, hand_height=None, hand_length=None, hand_weight=None, hold_width=None, hold_height=None, hold_length=None, hold_dimensions_sum=None, hold_weight=None):  # noqa: E501
        """Baglimit - a model defined in Swagger"""  # noqa: E501
        self._hand_width = None
        self._hand_height = None
        self._hand_length = None
        self._hand_weight = None
        self._hold_width = None
        self._hold_height = None
        self._hold_length = None
        self._hold_dimensions_sum = None
        self._hold_weight = None
        self.discriminator = None
        if hand_width is not None:
            self.hand_width = hand_width
        if hand_height is not None:
            self.hand_height = hand_height
        if hand_length is not None:
            self.hand_length = hand_length
        if hand_weight is not None:
            self.hand_weight = hand_weight
        if hold_width is not None:
            self.hold_width = hold_width
        if hold_height is not None:
            self.hold_height = hold_height
        if hold_length is not None:
            self.hold_length = hold_length
        if hold_dimensions_sum is not None:
            self.hold_dimensions_sum = hold_dimensions_sum
        if hold_weight is not None:
            self.hold_weight = hold_weight

    @property
    def hand_width(self):
        """Gets the hand_width of this Baglimit.  # noqa: E501

        The width of the hand bag in cm.  # noqa: E501

        :return: The hand_width of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hand_width

    @hand_width.setter
    def hand_width(self, hand_width):
        """Sets the hand_width of this Baglimit.

        The width of the hand bag in cm.  # noqa: E501

        :param hand_width: The hand_width of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hand_width = hand_width

    @property
    def hand_height(self):
        """Gets the hand_height of this Baglimit.  # noqa: E501

        The height of the hand bag in cm.  # noqa: E501

        :return: The hand_height of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hand_height

    @hand_height.setter
    def hand_height(self, hand_height):
        """Sets the hand_height of this Baglimit.

        The height of the hand bag in cm.  # noqa: E501

        :param hand_height: The hand_height of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hand_height = hand_height

    @property
    def hand_length(self):
        """Gets the hand_length of this Baglimit.  # noqa: E501

        The length of the hand bag in cm.  # noqa: E501

        :return: The hand_length of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hand_length

    @hand_length.setter
    def hand_length(self, hand_length):
        """Sets the hand_length of this Baglimit.

        The length of the hand bag in cm.  # noqa: E501

        :param hand_length: The hand_length of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hand_length = hand_length

    @property
    def hand_weight(self):
        """Gets the hand_weight of this Baglimit.  # noqa: E501

        The weight of the hand bag in kg. Weight=`null` is used for unlimited weight cabin bag.  # noqa: E501

        :return: The hand_weight of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hand_weight

    @hand_weight.setter
    def hand_weight(self, hand_weight):
        """Sets the hand_weight of this Baglimit.

        The weight of the hand bag in kg. Weight=`null` is used for unlimited weight cabin bag.  # noqa: E501

        :param hand_weight: The hand_weight of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hand_weight = hand_weight

    @property
    def hold_width(self):
        """Gets the hold_width of this Baglimit.  # noqa: E501

        The width of the hold bag in cm.  # noqa: E501

        :return: The hold_width of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hold_width

    @hold_width.setter
    def hold_width(self, hold_width):
        """Sets the hold_width of this Baglimit.

        The width of the hold bag in cm.  # noqa: E501

        :param hold_width: The hold_width of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hold_width = hold_width

    @property
    def hold_height(self):
        """Gets the hold_height of this Baglimit.  # noqa: E501

        The height of the hold bag in cm.  # noqa: E501

        :return: The hold_height of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hold_height

    @hold_height.setter
    def hold_height(self, hold_height):
        """Sets the hold_height of this Baglimit.

        The height of the hold bag in cm.  # noqa: E501

        :param hold_height: The hold_height of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hold_height = hold_height

    @property
    def hold_length(self):
        """Gets the hold_length of this Baglimit.  # noqa: E501

        The length of the hold bag in cm.  # noqa: E501

        :return: The hold_length of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hold_length

    @hold_length.setter
    def hold_length(self, hold_length):
        """Sets the hold_length of this Baglimit.

        The length of the hold bag in cm.  # noqa: E501

        :param hold_length: The hold_length of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hold_length = hold_length

    @property
    def hold_dimensions_sum(self):
        """Gets the hold_dimensions_sum of this Baglimit.  # noqa: E501

        The sum of all dimensions of the hold bags in cm. It can also be `null`.  # noqa: E501

        :return: The hold_dimensions_sum of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hold_dimensions_sum

    @hold_dimensions_sum.setter
    def hold_dimensions_sum(self, hold_dimensions_sum):
        """Sets the hold_dimensions_sum of this Baglimit.

        The sum of all dimensions of the hold bags in cm. It can also be `null`.  # noqa: E501

        :param hold_dimensions_sum: The hold_dimensions_sum of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hold_dimensions_sum = hold_dimensions_sum

    @property
    def hold_weight(self):
        """Gets the hold_weight of this Baglimit.  # noqa: E501

        The weight of the hold bag in kg.  # noqa: E501

        :return: The hold_weight of this Baglimit.  # noqa: E501
        :rtype: int
        """
        return self._hold_weight

    @hold_weight.setter
    def hold_weight(self, hold_weight):
        """Sets the hold_weight of this Baglimit.

        The weight of the hold bag in kg.  # noqa: E501

        :param hold_weight: The hold_weight of this Baglimit.  # noqa: E501
        :type: int
        """

        self._hold_weight = hold_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Baglimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Baglimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
